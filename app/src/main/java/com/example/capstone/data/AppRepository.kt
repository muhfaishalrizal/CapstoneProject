package com.example.capstone.dataimport androidx.lifecycle.LiveDataimport androidx.lifecycle.liveDataimport androidx.paging.*import com.example.capstone.api.ApiServiceimport com.example.capstone.model.Greeventsimport com.example.capstone.model.ResponseLoginimport com.example.capstone.model.ResponseRegisterimport com.example.capstone.preference.PreferenceLoginclass AppRepository(private val prefe: PreferenceLogin, private val apiService: ApiService) {    fun autLogin(email: String,password: String): LiveData<Result<ResponseLogin>> = liveData{        emit(Result.Loading)        try {            val response = apiService.login(email, password)            if (response.status != 200){                emit(Result.Error(response.msfg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception){            emit(Result.Error(e.message.toString()))        }    }    fun authRegister(name: String, email: String, password: String): LiveData<Result<ResponseRegister>> = liveData {        emit(Result.Loading)        try {            val response = apiService.register(name, email, password)            if (response.status != 200){                emit(Result.Error(response.msg))            } else {                emit(Result.Success(response))            }        } catch (e: Exception){            emit(Result.Error(e.message.toString()))        }    }    fun getAllEvents(): LiveData<PagingData<Greevents>>{        @OptIn(ExperimentalPagingApi::class)        return Pager(            config =  PagingConfig(pageSize = 5),            pagingSourceFactory = {                GreeventsPagingSource(prefe, apiService)            }        ).liveData    }    companion object{        @Volatile        private var instance: AppRepository?= null        fun getInstance(            prefe: PreferenceLogin,            apiService: ApiService        ): AppRepository = instance ?: synchronized(this){            instance ?: AppRepository(prefe, apiService)        }.also { instance = it }    }}