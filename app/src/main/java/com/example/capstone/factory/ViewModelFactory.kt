package com.example.capstone.factoryimport android.content.Contextimport androidx.lifecycle.ViewModelimport androidx.lifecycle.ViewModelProviderimport com.example.capstone.data.AppRepositoryimport com.example.capstone.di.Injectionimport com.example.capstone.ui.home.HomeViewModelimport com.example.capstone.ui.login.LoginViewModelimport com.example.capstone.ui.profile.ProfileViewModelimport com.example.capstone.ui.sign_up.SignUpViewModelclass ViewModelFactory private constructor(private val appRepository: AppRepository): ViewModelProvider.NewInstanceFactory(){    @Suppress("UNCHECKED_CAST")    override fun <T : ViewModel> create(modelClass: Class<T>): T {        if (modelClass.isAssignableFrom(LoginViewModel::class.java)) {            return LoginViewModel(appRepository) as T        }        if (modelClass.isAssignableFrom(SignUpViewModel::class.java)){            return SignUpViewModel(appRepository) as T        }        if (modelClass.isAssignableFrom(HomeViewModel::class.java)){            return HomeViewModel(appRepository) as T        }        throw IllegalArgumentException("Unknown ViewModel class: " + modelClass.name)    }    companion object{        @Volatile        private var instance: ViewModelFactory? = null        fun getInstnce(context: Context): ViewModelFactory{            return instance ?: synchronized(this){                instance ?: ViewModelFactory(Injection.provideRepository(context))            }.also { instance = it }        }    }}